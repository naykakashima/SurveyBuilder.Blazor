@using global::SurveyBuilder.Models
@using global::SurveyBuilder.Services

@inject IDialogService DialogService
@inject ISurveyJsonService JsonService

<MudStack Row="true" Class="mb-2 justify-end pa-2">
    <MudButton Variant="Variant.Filled" 
               StartIcon="@Icons.Material.Filled.Visibility"
               Color="Color.Primary"
               OnClick="OpenPreviewDialog">

                   Preview Survey
    </MudButton>

    <MudButton Variant="Variant.Filled" 
               StartIcon="@Icons.Material.Filled.Save"
               Color="Color.Primary"
               OnClick="SaveSurvey">

                   Save Survey(JSON)
    </MudButton>

    <MudButton Variant="Variant.Filled" 
               StartIcon="@Icons.Material.Filled.FileUpload"
               Color="Color.Primary"
               OnClick="ShowLoadDialog">

                   Load Survey (JSON)
    </MudButton>


</MudStack>

<MudPaper Class="pa-4">
    <!-- Title & Description -->
    <MudCard Outlined="true" Class="mb-4">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">
                    Create your survey title and description here
                </MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField Label="Survey Title" @bind-Value="Survey.Title" FullWidth="true" Class="mb-2" />
            <MudTextField Label="Description" @bind-Value="Survey.Description" Lines="3" FullWidth="true" />
        </MudCardContent>
    </MudCard>

    <!-- Add Question Button -->
    <MudStack Row="false" Spacing="1" AlignItems="_align" Class="mb-4">
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick="AddQuestion"
                   StartIcon="@Icons.Material.Filled.Add"
                   Disabled="Survey.Questions.Count >= 10">
            Add Question
        </MudButton>

        @if (Survey.Questions.Count == 0)
        {
            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-2">
                No questions yet. Add one to get started.
            </MudText>
        }
    </MudStack>

    <!-- Survey Questions -->
    @foreach (var question in Survey.Questions)
    {
        <MudPaper Elevation="1" Class="p-3 d-flex justify-between align-center mb-2">
            <!-- Question Text -->
            <MudText Typo="Typo.subtitle2" Class="pa-1 flex-grow-1">
                @(!string.IsNullOrWhiteSpace(question.Text)
                    ? question.Text
                    : "Question hasn't been created yet")
            </MudText>

            <!-- Edit / Delete Buttons -->
            <MudStack Row="true" Spacing="1">
                <MudButton Size="Size.Small"
                           Variant="Variant.Filled"
                           OnClick="@(() => OpenEditorDialog(question))">
                    Edit
                </MudButton>
                <MudButton Size="Size.Small"
                           Color="Color.Error"
                           Variant="Variant.Outlined"
                           OnClick="@(() => RemoveQuestion(question))">
                    Delete
                </MudButton>
            </MudStack>
        </MudPaper>
    }
</MudPaper>

@code {
    [Parameter] public EventCallback<SurveyModel> SurveyChanged { get; set; }
    private SurveyModel Survey = new(); // main state
    private QuestionType newQuestionType = QuestionType.SingleChoice;
    AlignItems _align = AlignItems.Start;

    string savedJson = "";
    bool showLoadDialog = false;
    string loadJsonInput = "";

    private void NotifyChange()
    {
        if (SurveyChanged.HasDelegate)
        {
            SurveyChanged.InvokeAsync(Survey);
        }
    }

    private void AddQuestion()
    {
        if (Survey.Questions.Count >= 10) return;

        Survey.Questions.Add(new SurveyQuestionModel
        {
            Text = "",
            Type = newQuestionType,
            Required = false,
            Options = new List<string>() // default if needed
        });

        NotifyChange();
    }

    private void RemoveQuestion(SurveyQuestionModel q)
    {
        Survey.Questions.Remove(q);
        NotifyChange();
    }

    private async Task OpenEditorDialog(SurveyQuestionModel question)
    {
        var parameters = new DialogParameters<QuestionEditorDialog>
        {
            { x => x.OriginalQuestion, question }
        };

        var options = new DialogOptions 
        { 
            CloseButton = true, 
            MaxWidth = MaxWidth.Medium, 
            FullWidth = true,
            CloseOnEscapeKey = true
        };

        var dialog = await DialogService.ShowAsync<QuestionEditorDialog>("Edit Question", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is SurveyQuestionModel updated)
        {
            var index = Survey.Questions.IndexOf(question);
            if (index != -1)
            {
                Survey.Questions[index] = updated;
            }
        }
        NotifyChange();
    }

    private async Task OpenPreviewDialog()
    {
        var parameters = new DialogParameters<SurveyPreviewDialog>
        {
            { x => x.Survey, Survey }
        };

        var options = new DialogOptions
        {
            FullWidth = true,
            MaxWidth = MaxWidth.Large,
            CloseOnEscapeKey = true
        };

        await DialogService.ShowAsync<SurveyPreviewDialog>("Preview Survey", parameters, options);
    }

    void SaveSurvey()
    {
        savedJson = JsonService.Serialize(Survey);
        NotifyChange();
    }

    void ShowLoadDialog()
    {
        showLoadDialog = true;
    }

    void LoadSurvey()
    {
        Survey = JsonService.Deserialize(loadJsonInput);
        showLoadDialog = false;
        NotifyChange();

    }

}